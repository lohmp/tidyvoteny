library(tidyvoteny)
devtools::install_github("jorgep17/tidyvoteny")
library(tidyvoteny)
# here we determine our district number is '15' and we want to see election results broken down for the 2018 Governor Primary by Congressional District.
target = "15"
formula =  cong_district~Unit.Name
#install.packages("data.table")
library(data.table)
# 2018 Governor ####
Gov18 <- nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
library(tidyvoteny)
head(nycdb)
# 2018 Governor ####
Gov18 <- nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
# 2018 Governor ####
Gov18 <- nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
#install.packages("data.table")
library(data.table)
library(dplyr)
# 2018 Governor ####
Gov18 <- nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
# 2018 Governor ####
Gov18 <- as.data.table(nycdb) %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
data.table(nycdb)
nycdb <- data.table(nycdb)
nycdb <- as.numeric(nycdb$votes)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
#install.packages("data.table")
library(data.table)
library(dplyr)
nycdb <- as.numeric(nycdb$votes)
nycdb <- data.table(nycdb)
nycdb <- as.numeric(nycdb$votes)
nycdb <- data.table(nycdb)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
#install.packages("data.table")
library(data.table)
library(dplyr)
nycdb <- as.numeric(nycdb$votes)
library(tidyvoteny)
nycdb <- data.table(nycdb)
library(tidyvoteny)
nycdb <- data.table::fread("nycdb.csv",header = T,stringsAsFactors = F)
load("~/GitHub/tidyvoteny/data/nycdb.rda")
View(nycdb)
nycdb <- as.data.table(x = nycdb)
nycdb$votes <- as.numeric(nycdb$votes)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
# here we determine our district number is '15' and we want to see election results broken down for the 2018 Governor Primary by Congressional District.
target = "15"
formula =  cong_district~Unit.Name
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
Gov18 <- Gov18[,c( "cong_district","Andrew M. Cuomo", "Cynthia E. Nixon")]
View(Gov18)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
View(Gov18)
library(tidyvoteny)
# here we determine our district number is '15' and we want to see election results broken down for the 2018 Governor Primary by Congressional District.
target = "15"
formula =  cong_district~Unit.Name
#install.packages("data.table")
library(data.table)
library(dplyr)
nycdb <- as.numeric(nycdb$votes)
nycdb <- data.table(nycdb)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
library(tidyvoteny)
# here we determine our district number is '15' and we want to see election results broken down for the 2018 Governor Primary by Congressional District.
target = "15"
formula =  cong_district~Unit.Name
#install.packages("data.table")
library(data.table)
library(dplyr)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
library(tidyvoteny)
load("~/GitHub/tidyvoteny/data/nycdb.rda")
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
devtools::install_github("jorgep17/tidyvoteny")
library(tidyvoteny)
head(nycdb)
library(tidyvoteny)
# here we determine our district number is '15' and we want to see election results broken down for the 2018 Governor Primary by Congressional District.
target = "15"
formula =  cong_district~Unit.Name
#install.packages("data.table")
library(data.table)
library(dplyr)
# 2018 Governor ####
Gov18 <-nycdb %>%
dcast.data.table(subset = .(Event == "PE_2018"
& Office == "Governor"),
formula = formula,
fun.aggregate = sum,
value.var = "votes")
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
library(sf)
install.packages("sf")
library(sf)
library(rgdal)
install.packages("rgdal")
install.packages(c("leaflet", "data.table", "wesanderson", "janitor", "tidyvoteny", "RColorBrewer", "rgeos", "tigris", "dplyr", "stringr", "htmltools"))
install.packages(c("leaflet", "data.table", "wesanderson", "janitor", "tidyvoteny", "RColorBrewer", "rgeos", "tigris", "dplyr", "stringr", "htmltools"))
library(sf)
library(rgdal)
library(mapview)
library(htmltools)
library(stringr) # to pad fips codes
library(dplyr)
library(leaflet)
library(tigris)
library(rgeos)
library(data.table)
library(RColorBrewer)
library(wesanderson)
library(tidyvoteny)
library(janitor)
library(readr)
nycdb <- data.table::fread("nycdb.csv",header = T,stringsAsFactors = F)
# Compress data table
nycdb <- readRDS("~/r_space/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
load("~/work_space/r_spaces/tidyvoteny/data/nycdb.rda")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Definitions
setwd("~/work_space/911 Tracker")
#inputDate    <- "2019-12-31"
CostsCodesIndex  <- "all_codes_qty_costs.csv"
source_dir   <-  "sources"
d_names      <-  c("consid",
"importid",
"DMPcampid",
"fundid",
"appeal",
"sourcecode",
"paymeth",
"gfcctype" ,
"gfchecknum",
"gfcheckdate",
"gfpost",
"gfpostdate",
"amount",
"giftcode",
"gflitcode",
"gfref",
"flag",
"mecat",
"gfdate")
badsourcecodes <- c("HF042020ANMB",
"HF042020ANMM",
"HF042020ANOB",
"HF042020ATMB",
"HF042020ATMM",
"HF042020ATOB",
"HF042020SEED")
# Libraries
{
library(pacman)
library(stringr)
library(formattable)
library(knitr)
library(data.table)
library(DT)
library(dplyr)
library(stringi)
library(stringr)
library(readxl)
library(tibble)
library(knitr)
library(kableExtra)
library(tidyr)
library(dtplyr)
library(readr)
}
# Functions
{
# KPIs functions
resp_rate <- function(responses,quantity){temp <- round(responses / quantity, 4)
return(temp)
}
ae_gft_amt <- function(amount,responses){temp <- round(amount/responses, 2)
return(temp)
}
net_revenue <- function(amount , cost){temp <- round(amount - cost, 2)
return(temp)
}
cost2acq <- function(cost, responses){temp <- round(cost/responses, 2)
return(temp)
}
ROI  <- function(amount, cost){temp <- round(amount/cost, 2)
return(temp)
}
date2mYR <- function(dates){
yr <- stri_sub(dates, from = 1, length = 4)
mt <- month.abb[as.numeric(stri_sub(dates, from = 6, length = 2))]
return(paste(mt,"-",yr,sep = ""))
}
add_col_sums.data.table <- function(data, aggvars, byvars, FUN = sum, level = "level") {
# Find all possible subsets of your data
subsets <- lapply(0:length(byvars), combn, x = byvars, simplify = FALSE)
subsets <- do.call(c, subsets)
# Calculate summary value by each subset
agg_values <- lapply(subsets, function(x)
data[,lapply(.SD, FUN), by = x, .SDcols = aggvars])
# Pull them all into one dataframe
dat_out <- rbindlist(agg_values, fill = TRUE)
# Order columns and rows
setorderv(dat_out, byvars, na.last = TRUE)
setcolorder(dat_out, c(byvars, aggvars))
# Add level indication
dat_out[, c(level) := Reduce("+", lapply(.SD, is.na))]
# Return data.table
dat_out[]
}
rbindlist_fread <- function(path, pattern = "*.csv") {
files = list.files(path, pattern, full.names = TRUE)
rbindlist(lapply(files, function(x) fread(x, header = T, colClasses = c('GFCheckNum' = 'character'))))
}
extract.letters <- function(x, space = ""){
require(stringr)
require(purrr)
require(magrittr)
y <- strsplit(unlist(x), "[^a-zA-Z]+")
z <- y %>% map(~paste(., collapse = space)) %>% simplify()
return(z)
}
}
# import and Merge source data with Costs Codes for Further Metric Calculation
setwd("~/r_space/911 Tracker")
# Compress data table
nycdb <- readRDS("~/work_space/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
# Compress data table
nycdb <- readRDS("~/work_space/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
rm(nycdb)
file.remove("nycdb.Rds")
load("~/work_space/tidyvoteny/data/nycdb.rda")
View(nycdb)
# Compress data table
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
#nycdb <- stringi::stri_trans_general(nycdb, "latin-ascii")
nycdb <- data.table::as.data.table(x = nycdb)
usethis::use_data(nycdb, compress = "xz",overwrite = TRUE)
nycdb <- readRDS("~/work_space/r_spaces/tidyvoteny/nycdb.Rds")
